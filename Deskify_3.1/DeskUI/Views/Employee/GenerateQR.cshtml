@model DeskEntity.Model.SecretKey;

@{
    Layout = "~/Views/Shared/_EmployeeLayout.cshtml";
}


<html>
    <head>
        <style>
      

        * {
          box-sizing: border-box;
        }

        /*body {
          align-items: center;
          display: flex;
          font-family: "Newsreader", serif;
          margin: 0;
          overflow: hidden;
          justify-content: center;
        }*/

        .bg {
          top: -30px;
          left: -30px;
          z-index: -1;
          filter: blur(60px);
        }

        .loading-text {
            font-size: 50px;
            color: white;
            text-align: center;
        }
        </style>
    </head>
<body style="background:-webkit-linear-gradient(left, #fff, #000)">
    <section class="vh-70 gradient-custom">
        <div class="container py-5 h-100">
            <div class="row justify-content-center align-items-center h-100 mt-5">
                <div class="col-6 col-xl-4">
                    <div class="card shadow-2-strong card-registration" style="border-radius: 15px;">
                        <div class="card-body">
                            <h3 class="text-center">Scan Me</h3>
                            
                            @{

                                string imageBase64Data = Convert.ToBase64String(Model.QRCode);
                                string imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                                <div class="bg">
                                    <img class="img-fluid" height="300" width="300" src="@imageDataURL" />
                                </div>
                                <div class="loading-text" style="display:none"></div>
                                
                            }
                            
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <script>
        const bg = document.querySelector(".bg");
        const loadText = document.querySelector(".loading-text");

        let load = 0;
        let int = setInterval(blurring, 10);

        function blurring() {
            load++;
            if (load > 99) {
                setInterval(int);
            }

            loadText.innerText = `${load}%`;
            loadText.style.opacity = scale(load, 0, 100, 1, 0);
            bg.style.filter = `blur(${scale(load, 0, 100, 30, 0)}px)`;
        }

        const scale = (num, in_min, in_max, out_min, out_max) => {
            return ((num - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min;
        };
    </script>
  </body>
  
</html>

